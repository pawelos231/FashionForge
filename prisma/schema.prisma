generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

enum Role {
  ADMIN
  USER
  MODERATOR
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  password    String
  photoLink   String   @default("")
  description String   @default("")
  socialLinks String[] @default([""])
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts         Post[]
  commentsLikes CommentVote[]
  postLikes     PostVote[]
  comments      Comment[]

  @@index([email])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id])
  post     Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent   Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  children Comment[]     @relation("ParentChild")
  likes    CommentVote[]

  userId   Int
  postId   Int
  parentId Int?

  @@index([userId])
  @@index([postId])
}

model CommentVote {
  userId    Int
  commentId Int
  type      VoteType

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@id([commentId, userId])
}

model PostVote {
  userId Int
  postId Int
  type   VoteType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

//add slug later
model Post {
  id               Int      @id @default(autoincrement())
  title            String
  modelPictureLink String   @default("")
  modelLink        String   @default("")
  fullTextureLink  String   @default("")
  logoTextureLink  String   @default("")
  content          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments Comment[]
  votes    PostVote[]

  authorId Int

  @@index([authorId])
}
